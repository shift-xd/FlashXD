{
  "deckName": "Java Classes & Constructors",
  "flashcards": [
    {
      "id": 1,
      "question": "What is a class in Java?",
      "answer": "A blueprint/template/prototype that describes characteristics (data) and behavior (functions) of objects",
      "category": "Java OOP",
      "detailedExplanation": "A class is the fundamental building block of Object-Oriented Programming in Java. It serves as a template that defines the structure and behavior that objects created from it will possess. A class encapsulates data members (variables) and member methods (functions) that operate on that data.\n\nThe class itself doesn't occupy memory - it's just a definition. When objects are created from the class (instantiated), they get their own copies of the data members while sharing the same methods. This concept allows for code reusability, organization, and implements key OOP principles like encapsulation and data hiding.",
      "keyPoints": [
        "Blueprint for creating objects",
        "Contains data members and member methods",
        "Doesn't occupy memory itself",
        "Enables encapsulation and data hiding"
      ],
      "examples": [
        "class Car { String color; int speed; void accelerate() {...} }",
        "class Student { String name; int rollNo; void study() {...} }"
      ]
    },
    {
      "id": 2,
      "question": "What are the three types of variables in a class?",
      "answer": "Instance variables, Class variables (static), and Local variables",
      "category": "Java Variables",
      "detailedExplanation": "Java classes can contain three distinct types of variables, each with different scope and lifetime:\n\n1. **Instance Variables**: Declared within the class but outside any method. Each object gets its own separate copy. They represent the 'state' of individual objects.\n\n2. **Class Variables (Static)**: Declared with the 'static' keyword. Only one copy exists per class, shared by all objects. Used for class-level properties.\n\n3. **Local Variables**: Declared within methods. Their scope is limited to the method block where they're declared. Used for temporary storage during method execution.",
      "keyPoints": [
        "Instance variables - separate for each object",
        "Class variables - shared across all objects",
        "Local variables - limited to method scope",
        "Static variables use 'static' keyword"
      ],
      "examples": [
        "Instance: 'int age;' in class Person",
        "Class: 'static int count;' as object counter",
        "Local: 'int i;' inside a for loop in a method"
      ]
    },
    {
      "id": 3,
      "question": "What are access specifiers and what are the three main types?",
      "answer": "Keywords that define the scope/visibility of class members: private, public, and protected",
      "category": "Java Access Control",
      "detailedExplanation": "Access specifiers (also called visibility modes) control which parts of your program can access specific class members (variables and methods). They are essential for implementing encapsulation and data hiding.\n\n**Private**: Members are accessible only within the class itself. This provides the highest level of protection.\n\n**Public**: Members are accessible from anywhere in the program - both inside and outside the class.\n\n**Protected**: Members act as private for the class itself but can be accessed by subclasses during inheritance.\n\nIf no access specifier is provided, the member has 'default' (package-private) accessibility.",
      "keyPoints": [
        "Private - only within the class",
        "Public - accessible from anywhere",
        "Protected - accessible in class and subclasses",
        "Default - package-private access"
      ],
      "examples": [
        "private int salary; // Only accessible within class",
        "public String name; // Accessible from anywhere",
        "protected void calculate() {...} // Accessible in subclasses"
      ]
    },
    {
      "id": 4,
      "question": "What is a constructor and what are its key features?",
      "answer": "A special member method that initializes instance variables when an object is created",
      "category": "Java Constructors",
      "detailedExplanation": "A constructor is a special type of method that's automatically called when an object is instantiated. Its primary purpose is to initialize the instance variables of the newly created object.\n\nKey Features:\n- Has the exact same name as the class\n- No return type (not even void)\n- Automatically called when object is created using 'new'\n- Used only for initialization, not for general operations\n- Always declared public\n- Can be overloaded (multiple constructors with different parameters)\n- If no constructor is defined, Java provides a default constructor",
      "keyPoints": [
        "Same name as class",
        "No return type",
        "Automatically called on object creation",
        "Used for initialization only",
        "Always public"
      ],
      "examples": [
        "class Student { Student() { // default constructor }}",
        "class Car { Car(String model) { this.model = model; }}"
      ]
    },
    {
      "id": 5,
      "question": "What are the main types of constructors?",
      "answer": "Default constructor, Non-parameterised constructor, Parameterised constructor, and Copy constructor",
      "category": "Java Constructors",
      "detailedExplanation": "Constructors can be categorized into four main types based on their parameters and functionality:\n\n1. **Default Constructor**: Provided by Java if no constructor is defined. Initializes variables with default values (0, null, false).\n\n2. **Non-parameterised Constructor**: Takes no parameters. Initializes variables with fixed values defined in constructor body.\n\n3. **Parameterised Constructor**: Takes parameters to initialize variables with values passed during object creation.\n\n4. **Copy Constructor**: Takes an object of same class as parameter and copies its values to the new object. Can be implemented by passing object or assigning object.",
      "keyPoints": [
        "Default - provided by Java, sets default values",
        "Non-parameterised - no parameters, fixed values",
        "Parameterised - takes parameters for initialization",
        "Copy - copies values from existing object"
      ],
      "examples": [
        "Default: Java provides if none written",
        "Non-param: Student() { age = 18; }",
        "Param: Student(String n) { name = n; }",
        "Copy: Student(Student s) { this.name = s.name; }"
      ]
    },
    {
      "id": 6,
      "question": "What is the 'this' keyword and what are its main uses?",
      "answer": "A reference variable that refers to the current object",
      "category": "Java Keywords",
      "detailedExplanation": "The 'this' keyword is a special reference variable in Java that always points to the current object - the object through which the method was called. It's particularly useful in several scenarios:\n\n1. **Eliminating Ambiguity**: When instance variables and method parameters have the same name, 'this' distinguishes instance variables.\n\n2. **Referring to Current Object**: To explicitly refer to the current object's members within methods.\n\n3. **Constructor Chaining**: To call one constructor from another in the same class.\n\n4. **Passing Current Object**: To pass the current object as a parameter to other methods.\n\n5. **Returning Current Object**: To return the current object from methods.",
      "keyPoints": [
        "Refers to current object",
        "Solves naming conflicts",
        "Used for constructor chaining",
        "Can pass 'this' as method parameter"
      ],
      "examples": [
        "void setData(int age) { this.age = age; }",
        "Student() { this(\"Unknown\"); } // calling another constructor",
        "return this; // returning current object"
      ]
    },
    {
      "id": 7,
      "question": "What are static members and what are their characteristics?",
      "answer": "Class-level members (variables/methods) that belong to the class rather than individual objects",
      "category": "Java Static",
      "detailedExplanation": "Static members are declared using the 'static' keyword and have class-level scope rather than object-level scope.\n\n**Static Variables (Class Variables)**:\n- Only one copy per class, shared by all objects\n- Created when program starts, destroyed when program ends\n- Often used as counters or accumulators\n- Can be constants when declared 'static final'\n\n**Static Methods**:\n- Belong to class, not to any object\n- Can be called without creating objects\n- Can only access static data members\n- Cannot call non-static methods directly\n- Cannot use 'this' keyword\n\nStatic members are accessed using class name: ClassName.staticMember",
      "keyPoints": [
        "One copy per class (not per object)",
        "Shared by all objects of the class",
        "Static methods can only use static data",
        "Accessed via class name"
      ],
      "examples": [
        "static int studentCount; // shared counter",
        "static void displayCount() { ... } // class method",
        "Student.studentCount // accessing via class name"
      ]
    },
    {
      "id": 8,
      "question": "What is constructor overloading?",
      "answer": "Having multiple constructors in the same class with different parameter lists",
      "category": "Java OOP",
      "detailedExplanation": "Constructor overloading is the practice of defining multiple constructors in the same class, each with a different number or type of parameters. This provides flexibility in how objects can be initialized.\n\nWhen an object is created, Java automatically determines which constructor to call based on the arguments provided. If no arguments are provided, the default or non-parameterised constructor is called. If arguments match a parameterised constructor, that specific constructor is invoked.\n\nThis feature allows objects to be initialized in different ways depending on what information is available at the time of creation, making the class more versatile and user-friendly.",
      "keyPoints": [
        "Multiple constructors in same class",
        "Different parameter lists",
        "Automatic selection based on arguments",
        "Provides initialization flexibility"
      ],
      "examples": [
        "Student() { ... } // default",
        "Student(String name) { ... } // name only",
        "Student(String name, int age) { ... } // name and age"
      ]
    },
    {
      "id": 9,
      "question": "What are nested member methods?",
      "answer": "When one member method calls another member method within the same class",
      "category": "Java Methods",
      "detailedExplanation": "Nested member methods refer to the practice of calling one member method from within another member method of the same class. This promotes code reusability and follows the DRY (Don't Repeat Yourself) principle.\n\nInstead of writing the same logic multiple times in different methods, you can write it once in a dedicated method and call it from other methods that need that functionality. This makes the code more maintainable and reduces redundancy.\n\nThe called method can be either static or non-static, but if a static method calls a non-static method, it must be through an object reference.",
      "keyPoints": [
        "Method calling another method in same class",
        "Promotes code reusability",
        "Reduces code duplication",
        "Follows DRY principle"
      ],
      "examples": [
        "void methodA() { methodB(); } // calling methodB from methodA",
        "void calculate() { validate(); process(); } // multiple nested calls"
      ]
    },
    {
      "id": 10,
      "question": "What is the difference between constructor and member method?",
      "answer": "Constructor initializes objects (same name as class, no return type) while methods perform operations (different names, have return types)",
      "category": "Java Comparison",
      "detailedExplanation": "Constructors and member methods serve different purposes in a class:\n\n**Constructors**:\n- Same name as class name\n- No return type (not even void)\n- Automatically called when object is created\n- Used only for initializing instance variables\n- Always public\n- Automatically overloaded if multiple exist\n\n**Member Methods**:\n- Different name from class name\n- Must have return type (void or data type)\n- Explicitly called through objects\n- Perform various operations on data\n- Can be public, private, or protected\n- Need explicit overloading\n\nConstructors set up the object's initial state, while methods define what the object can do.",
      "keyPoints": [
        "Constructor: same name as class, no return type",
        "Method: different name, has return type",
        "Constructor: automatic call on creation",
        "Method: explicit call through object"
      ],
      "examples": [
        "Constructor: Student() { ... }",
        "Method: void study() { ... } or int getAge() { ... }"
      ]
    }
  ],
  "mcqs": [
    {
      "id": 1,
      "question": "Which of the following is true about instance variables?",
      "options": [
        "They are shared by all objects of the class",
        "Each object gets its own separate copy",
        "They are declared inside methods",
        "They use the 'static' keyword"
      ],
      "correctAnswer": "Each object gets its own separate copy",
      "category": "Java Variables"
    },
    {
      "id": 2,
      "question": "What is the purpose of a constructor?",
      "options": [
        "To perform mathematical calculations",
        "To initialize instance variables",
        "To display output to console",
        "To handle user input"
      ],
      "correctAnswer": "To initialize instance variables",
      "category": "Java Constructors"
    },
    {
      "id": 3,
      "question": "Which access specifier provides the most restricted access?",
      "options": [
        "public",
        "private",
        "protected",
        "default"
      ],
      "correctAnswer": "private",
      "category": "Java Access Control"
    },
    {
      "id": 4,
      "question": "What does the 'this' keyword refer to?",
      "options": [
        "The parent class",
        "The current object",
        "The static context",
        "The method parameters"
      ],
      "correctAnswer": "The current object",
      "category": "Java Keywords"
    },
    {
      "id": 5,
      "question": "Which type of variable is shared by all objects of a class?",
      "options": [
        "Instance variable",
        "Local variable",
        "Class variable (static)",
        "Parameter variable"
      ],
      "correctAnswer": "Class variable (static)",
      "category": "Java Variables"
    },
    {
      "id": 6,
      "question": "What is constructor overloading?",
      "options": [
        "Making constructors private",
        "Having multiple constructors with different parameters",
        "Calling constructors from methods",
        "Using constructors in inheritance"
      ],
      "correctAnswer": "Having multiple constructors with different parameters",
      "category": "Java Constructors"
    }
  ]
}
